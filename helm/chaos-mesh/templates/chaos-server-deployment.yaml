{{- if .Values.chaosServer.create }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: chaos-server
  labels:
    app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: chaos-server
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+"  "_" }}
spec:
  replicas: {{ .Values.chaosServer.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: chaos-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: chaos-server
    {{- with .Values.chaosServer.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
    {{- end }}
    spec:
      {{- if .Values.chaosServer.serviceAccount }}
      serviceAccount: {{ .Values.chaosServer.serviceAccount }}
      {{- end }}
      containers:
        - name: chaos-server
          image: {{ .Values.chaosServer.image }}
          imagePullPolicy: {{ .Values.chaosServer.imagePullPolicy | default "IfNotPresent" }}
          resources:
{{ toYaml .Values.chaosServer.resources | indent 12 }}
          command:
            - /usr/local/bin/chaos-server
          envFrom:
          - configMapRef:
              name: {{ template "chaos-mesh.name" . }}-chaos-server
          volumeMounts:
          - name: storage-volume
            mountPath: {{ .Values.chaosServer.persistentVolume.mountPath }}
            subPath: "{{ .Values.chaosServer.persistentVolume.subPath }}"
        {{- with .Values.chaosServer.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.chaosServer.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.chaosServer.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      volumes:
      {{/* This is where Chaos Server stashes any data it needs to persist. If you use SQLite for your DB, state will go here. */}}
      - name: storage-volume
      {{- if .Values.chaosServer.persistentVolume.enabled }}
        persistentVolumeClaim:
        claimName: {{ if .Values.chaosServer.persistentVolume.existingClaim }}{{ .Values.chaosServer.persistentVolume.existingClaim }}{{- else }}{{ template "chaos-mesh.name" . }}-chaos-server{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ template "chaos-mesh.name" . }}-chaos-server
  labels:
    app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: chaos-server
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+"  "_" }}
spec:
  selector:
    app.kubernetes.io/name: {{ template "chaos-mesh.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: chaos-server
  type: NodePort
  ports:
    - protocol: TCP
      port: 2333
      targetPort: 2333

{{- end }}
